
module operators
  use instrict :: iso_c_binding
  use oa_type

contains

  !the following code using preprossor to create subroutines  
  function real8_plus_array(A, B) result(res)
    implicit none       
    real(8), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_PLUS, C, D)

  end function

  function real8_plus_node(A, B) result(res)
    implicit none       
    real(8), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_PLUS, C, D)

  end function

  function real_plus_array(A, B) result(res)
    implicit none       
    real, intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_PLUS, C, D)

  end function

  function real_plus_node(A, B) result(res)
    implicit none       
    real, intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_PLUS, C, D)

  end function

  function integer_plus_array(A, B) result(res)
    implicit none       
    integer, intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_PLUS, C, D)

  end function

  function integer_plus_node(A, B) result(res)
    implicit none       
    integer, intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_PLUS, C, D)

  end function

  function array_plus_real8(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    real(8), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_PLUS, C, D)

  end function

  function array_plus_real(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    real, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_PLUS, C, D)

  end function

  function array_plus_integer(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    integer, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_PLUS, C, D)

  end function

  function array_plus_array(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_PLUS, C, D)

  end function

  function array_plus_node(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_PLUS, C, D)

  end function

  function node_plus_real8(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    real(8), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_PLUS, C, D)

  end function

  function node_plus_real(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    real, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_PLUS, C, D)

  end function

  function node_plus_integer(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    integer, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_PLUS, C, D)

  end function

  function node_plus_array(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_PLUS, C, D)

  end function

  function node_plus_node(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    D%ptr = B%ptr

    call create_node(res, TYPE_PLUS, C, D)

  end function

  !the following code using preprossor to create subroutines  
  function real8_minus_array(A, B) result(res)
    implicit none       
    real(8), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_MINUS, C, D)

  end function

  function real8_minus_node(A, B) result(res)
    implicit none       
    real(8), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_MINUS, C, D)

  end function

  function real_minus_array(A, B) result(res)
    implicit none       
    real, intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_MINUS, C, D)

  end function

  function real_minus_node(A, B) result(res)
    implicit none       
    real, intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_MINUS, C, D)

  end function

  function integer_minus_array(A, B) result(res)
    implicit none       
    integer, intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_MINUS, C, D)

  end function

  function integer_minus_node(A, B) result(res)
    implicit none       
    integer, intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_MINUS, C, D)

  end function

  function array_minus_real8(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    real(8), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_MINUS, C, D)

  end function

  function array_minus_real(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    real, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_MINUS, C, D)

  end function

  function array_minus_integer(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    integer, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_MINUS, C, D)

  end function

  function array_minus_array(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_MINUS, C, D)

  end function

  function array_minus_node(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_MINUS, C, D)

  end function

  function node_minus_real8(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    real(8), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_MINUS, C, D)

  end function

  function node_minus_real(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    real, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_MINUS, C, D)

  end function

  function node_minus_integer(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    integer, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_MINUS, C, D)

  end function

  function node_minus_array(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_MINUS, C, D)

  end function

  function node_minus_node(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    D%ptr = B%ptr

    call create_node(res, TYPE_MINUS, C, D)

  end function

  !the following code using preprossor to create subroutines  
  function real8_mult_array(A, B) result(res)
    implicit none       
    real(8), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_MULT, C, D)

  end function

  function real8_mult_node(A, B) result(res)
    implicit none       
    real(8), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_MULT, C, D)

  end function

  function real_mult_array(A, B) result(res)
    implicit none       
    real, intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_MULT, C, D)

  end function

  function real_mult_node(A, B) result(res)
    implicit none       
    real, intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_MULT, C, D)

  end function

  function integer_mult_array(A, B) result(res)
    implicit none       
    integer, intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_MULT, C, D)

  end function

  function integer_mult_node(A, B) result(res)
    implicit none       
    integer, intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_MULT, C, D)

  end function

  function array_mult_real8(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    real(8), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_MULT, C, D)

  end function

  function array_mult_real(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    real, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_MULT, C, D)

  end function

  function array_mult_integer(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    integer, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_MULT, C, D)

  end function

  function array_mult_array(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_MULT, C, D)

  end function

  function array_mult_node(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_MULT, C, D)

  end function

  function node_mult_real8(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    real(8), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_MULT, C, D)

  end function

  function node_mult_real(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    real, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_MULT, C, D)

  end function

  function node_mult_integer(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    integer, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_MULT, C, D)

  end function

  function node_mult_array(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_MULT, C, D)

  end function

  function node_mult_node(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    D%ptr = B%ptr

    call create_node(res, TYPE_MULT, C, D)

  end function

  !the following code using preprossor to create subroutines  
  function real8_divd_array(A, B) result(res)
    implicit none       
    real(8), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_DIVD, C, D)

  end function

  function real8_divd_node(A, B) result(res)
    implicit none       
    real(8), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_DIVD, C, D)

  end function

  function real_divd_array(A, B) result(res)
    implicit none       
    real, intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_DIVD, C, D)

  end function

  function real_divd_node(A, B) result(res)
    implicit none       
    real, intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_DIVD, C, D)

  end function

  function integer_divd_array(A, B) result(res)
    implicit none       
    integer, intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_DIVD, C, D)

  end function

  function integer_divd_node(A, B) result(res)
    implicit none       
    integer, intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_DIVD, C, D)

  end function

  function array_divd_real8(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    real(8), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_DIVD, C, D)

  end function

  function array_divd_real(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    real, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_DIVD, C, D)

  end function

  function array_divd_integer(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    integer, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_DIVD, C, D)

  end function

  function array_divd_array(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_DIVD, C, D)

  end function

  function array_divd_node(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_DIVD, C, D)

  end function

  function node_divd_real8(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    real(8), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_DIVD, C, D)

  end function

  function node_divd_real(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    real, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_DIVD, C, D)

  end function

  function node_divd_integer(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    integer, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_DIVD, C, D)

  end function

  function node_divd_array(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_DIVD, C, D)

  end function

  function node_divd_node(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    D%ptr = B%ptr

    call create_node(res, TYPE_DIVD, C, D)

  end function

  !the following code using preprossor to create subroutines  
  function real8_gt_array(A, B) result(res)
    implicit none       
    real(8), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_GT, C, D)

  end function

  function real8_gt_node(A, B) result(res)
    implicit none       
    real(8), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_GT, C, D)

  end function

  function real_gt_array(A, B) result(res)
    implicit none       
    real, intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_GT, C, D)

  end function

  function real_gt_node(A, B) result(res)
    implicit none       
    real, intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_GT, C, D)

  end function

  function integer_gt_array(A, B) result(res)
    implicit none       
    integer, intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_GT, C, D)

  end function

  function integer_gt_node(A, B) result(res)
    implicit none       
    integer, intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_GT, C, D)

  end function

  function array_gt_real8(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    real(8), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_GT, C, D)

  end function

  function array_gt_real(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    real, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_GT, C, D)

  end function

  function array_gt_integer(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    integer, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_GT, C, D)

  end function

  function array_gt_array(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_GT, C, D)

  end function

  function array_gt_node(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_GT, C, D)

  end function

  function node_gt_real8(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    real(8), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_GT, C, D)

  end function

  function node_gt_real(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    real, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_GT, C, D)

  end function

  function node_gt_integer(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    integer, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_GT, C, D)

  end function

  function node_gt_array(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_GT, C, D)

  end function

  function node_gt_node(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    D%ptr = B%ptr

    call create_node(res, TYPE_GT, C, D)

  end function

  !the following code using preprossor to create subroutines  
  function real8_ge_array(A, B) result(res)
    implicit none       
    real(8), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_GE, C, D)

  end function

  function real8_ge_node(A, B) result(res)
    implicit none       
    real(8), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_GE, C, D)

  end function

  function real_ge_array(A, B) result(res)
    implicit none       
    real, intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_GE, C, D)

  end function

  function real_ge_node(A, B) result(res)
    implicit none       
    real, intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_GE, C, D)

  end function

  function integer_ge_array(A, B) result(res)
    implicit none       
    integer, intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_GE, C, D)

  end function

  function integer_ge_node(A, B) result(res)
    implicit none       
    integer, intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_GE, C, D)

  end function

  function array_ge_real8(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    real(8), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_GE, C, D)

  end function

  function array_ge_real(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    real, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_GE, C, D)

  end function

  function array_ge_integer(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    integer, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_GE, C, D)

  end function

  function array_ge_array(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_GE, C, D)

  end function

  function array_ge_node(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_GE, C, D)

  end function

  function node_ge_real8(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    real(8), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_GE, C, D)

  end function

  function node_ge_real(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    real, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_GE, C, D)

  end function

  function node_ge_integer(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    integer, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_GE, C, D)

  end function

  function node_ge_array(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_GE, C, D)

  end function

  function node_ge_node(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    D%ptr = B%ptr

    call create_node(res, TYPE_GE, C, D)

  end function

  !the following code using preprossor to create subroutines  
  function real8_lt_array(A, B) result(res)
    implicit none       
    real(8), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_LT, C, D)

  end function

  function real8_lt_node(A, B) result(res)
    implicit none       
    real(8), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_LT, C, D)

  end function

  function real_lt_array(A, B) result(res)
    implicit none       
    real, intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_LT, C, D)

  end function

  function real_lt_node(A, B) result(res)
    implicit none       
    real, intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_LT, C, D)

  end function

  function integer_lt_array(A, B) result(res)
    implicit none       
    integer, intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_LT, C, D)

  end function

  function integer_lt_node(A, B) result(res)
    implicit none       
    integer, intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_LT, C, D)

  end function

  function array_lt_real8(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    real(8), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_LT, C, D)

  end function

  function array_lt_real(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    real, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_LT, C, D)

  end function

  function array_lt_integer(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    integer, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_LT, C, D)

  end function

  function array_lt_array(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_LT, C, D)

  end function

  function array_lt_node(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_LT, C, D)

  end function

  function node_lt_real8(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    real(8), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_LT, C, D)

  end function

  function node_lt_real(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    real, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_LT, C, D)

  end function

  function node_lt_integer(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    integer, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_LT, C, D)

  end function

  function node_lt_array(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_LT, C, D)

  end function

  function node_lt_node(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    D%ptr = B%ptr

    call create_node(res, TYPE_LT, C, D)

  end function

  !the following code using preprossor to create subroutines  
  function real8_le_array(A, B) result(res)
    implicit none       
    real(8), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_LE, C, D)

  end function

  function real8_le_node(A, B) result(res)
    implicit none       
    real(8), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_LE, C, D)

  end function

  function real_le_array(A, B) result(res)
    implicit none       
    real, intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_LE, C, D)

  end function

  function real_le_node(A, B) result(res)
    implicit none       
    real, intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_LE, C, D)

  end function

  function integer_le_array(A, B) result(res)
    implicit none       
    integer, intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_LE, C, D)

  end function

  function integer_le_node(A, B) result(res)
    implicit none       
    integer, intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_LE, C, D)

  end function

  function array_le_real8(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    real(8), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_LE, C, D)

  end function

  function array_le_real(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    real, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_LE, C, D)

  end function

  function array_le_integer(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    integer, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_LE, C, D)

  end function

  function array_le_array(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_LE, C, D)

  end function

  function array_le_node(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_LE, C, D)

  end function

  function node_le_real8(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    real(8), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_LE, C, D)

  end function

  function node_le_real(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    real, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_LE, C, D)

  end function

  function node_le_integer(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    integer, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_LE, C, D)

  end function

  function node_le_array(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_LE, C, D)

  end function

  function node_le_node(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    D%ptr = B%ptr

    call create_node(res, TYPE_LE, C, D)

  end function

  !the following code using preprossor to create subroutines  
  function real8_eq_array(A, B) result(res)
    implicit none       
    real(8), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_EQ, C, D)

  end function

  function real8_eq_node(A, B) result(res)
    implicit none       
    real(8), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_EQ, C, D)

  end function

  function real_eq_array(A, B) result(res)
    implicit none       
    real, intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_EQ, C, D)

  end function

  function real_eq_node(A, B) result(res)
    implicit none       
    real, intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_EQ, C, D)

  end function

  function integer_eq_array(A, B) result(res)
    implicit none       
    integer, intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_EQ, C, D)

  end function

  function integer_eq_node(A, B) result(res)
    implicit none       
    integer, intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_EQ, C, D)

  end function

  function array_eq_real8(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    real(8), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_EQ, C, D)

  end function

  function array_eq_real(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    real, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_EQ, C, D)

  end function

  function array_eq_integer(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    integer, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_EQ, C, D)

  end function

  function array_eq_array(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_EQ, C, D)

  end function

  function array_eq_node(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_EQ, C, D)

  end function

  function node_eq_real8(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    real(8), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_EQ, C, D)

  end function

  function node_eq_real(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    real, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_EQ, C, D)

  end function

  function node_eq_integer(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    integer, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_EQ, C, D)

  end function

  function node_eq_array(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_EQ, C, D)

  end function

  function node_eq_node(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    D%ptr = B%ptr

    call create_node(res, TYPE_EQ, C, D)

  end function

  !the following code using preprossor to create subroutines  
  function real8_ne_array(A, B) result(res)
    implicit none       
    real(8), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_NE, C, D)

  end function

  function real8_ne_node(A, B) result(res)
    implicit none       
    real(8), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_NE, C, D)

  end function

  function real_ne_array(A, B) result(res)
    implicit none       
    real, intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_NE, C, D)

  end function

  function real_ne_node(A, B) result(res)
    implicit none       
    real, intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_NE, C, D)

  end function

  function integer_ne_array(A, B) result(res)
    implicit none       
    integer, intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_NE, C, D)

  end function

  function integer_ne_node(A, B) result(res)
    implicit none       
    integer, intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_NE, C, D)

  end function

  function array_ne_real8(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    real(8), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_NE, C, D)

  end function

  function array_ne_real(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    real, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_NE, C, D)

  end function

  function array_ne_integer(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    integer, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_NE, C, D)

  end function

  function array_ne_array(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    call create_node(D, B)

    call create_node(res, TYPE_NE, C, D)

  end function

  function array_ne_node(A, B) result(res)
    implicit none       
    type(array), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    call create_node(C, A)

    D%ptr = B%ptr

    call create_node(res, TYPE_NE, C, D)

  end function

  function node_ne_real8(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    real(8), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_NE, C, D)

  end function

  function node_ne_real(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    real, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_NE, C, D)

  end function

  function node_ne_integer(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    integer, intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_NE, C, D)

  end function

  function node_ne_array(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    type(array), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    call create_node(D, B)

    call create_node(res, TYPE_NE, C, D)

  end function

  function node_ne_node(A, B) result(res)
    implicit none       
    type(node), intent(in) :: A
    type(node), intent(in) :: B
    type(node) :: C, D
    type(node) :: res

    C%ptr = A%ptr

    D%ptr = B%ptr

    call create_node(res, TYPE_NE, C, D)

  end function


end module
