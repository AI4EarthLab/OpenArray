
name = main

#if you put the exteranl libaray in one directory
EXT_INCLUDE = $(addprefix -I, $(shell find ${EXT_PATH}/include -maxdepth 1 -type d))
EXT_LIB = -L${EXT_PATH}/lib/
JIT_LIB = ${EXT_PATH}/lib/

#if you put the external library seperately in different directories.
#use the following configureaton
# EXT_INC = -I${PNETCDF_INC} -I${ARMA_INC} -I${BOOST_INC} -I${GTEST_INC} -I${JIT_INC}
# EXT_LIB = -L${PNETCDF_LIB} -L${ARMA_LIB} -L${BOOST_LIB} -I${GTEST_LIB} -L${JIT_LIB}


EXT_LIB_LINK = 	-lpnetcdf -lboost_program_options -lboost_filesystem \
		-lboost_system -ldl -llapack -lblas -lgtest -ljit \
		-Wl,-rpath=${JIT_LIB}

debug:
	@echo ${EXT_INCLUDE}   

FC = mpiifort
CC = mpiicc
CXX = mpiicpc

FCFLAGS  =
CXXFLAGS = -fPIC --std=c++0x -Werror=return-type
CFLAGS   = -Werror=return-type

LIBS =  -lstdc++ ${EXT_LIB} ${EXT_LIB_LINK} 

OBJS = Range.o Box.o Partition.o Array.o \
       Internal.o Function.o Kernel.o Operator.o \
       Node.o IO.o 

OBJS_UTILS = $(addprefix ./utils/, calcTime.o gettimeofday.o \
			utils.o)

OBJS_C_INTERFACE = $(addprefix ./c-interface/, c_oa_type.o c_oa_utils.o)

OBJ_FORTRAN = ${OBJS} ${OBJS_UTILS} ${OBJS_C_INTERFACE} \
		$(addprefix ./fortran/, oa_type.o oa_utils.o fortran_main.o)

OBJ_MAIN  = ${OBJS} ${OBJS_UTILS} ${OBJS_C_INTERFACE} main.o

OBJ_TEST = ${OBJS} ${OBJS_UTILS} \
	   $(addprefix ./unittest/, test_array.o gtest_main.o)

OBJ_TEST_PERF = ${OBJS} ${OBJS_UTILS} \
	   $(addprefix ./unittest/, test_perf.o)

.DEFAULT_GOAL := all

MAKEFILE = makefile.linux-intel

%.o: %.cpp
	${CXX} ${EXT_INCLUDE} -c $(CXXFLAGS) $< -o $@

%.o: %.c
	${CXX} ${EXT_INCLUDE} -c $(CFLAGS) $< -o $@

%.o: %.F90
	${FC} -c $< -o $@

all:
	@rm -rf main
	@echo "Cleaning..."
	@mkdir -p build 2>/dev/null
	@./pre.sh
	@cd build && make clean -j  -f ${MAKEFILE}
	@echo "Cleaning done."
	@cd build && make main -j8 -f ${MAKEFILE} 2>/dev/null
	cp build/main ./

quick:
	@rm -rf ${name}
	@echo "Cleaning..."
	@mkdir -p build 2>/dev/null
	@./test.sh
	@cd build
	@echo "Cleaning done."
	@cd build && make ${name} -j8 -f ${MAKEFILE}
	@cp build/${name} ./
	@mpirun -n 4 ./${name} 4 4 4

main: ${OBJ_MAIN}
	-${CXX} -rdynamic -o main ${OBJ_MAIN} ${LIBS}

testall:
	@rm -rf main
	@echo "Cleaning..."
	@mkdir -p build 2>/dev/null
	@./pre.sh
	@cd build && make clean 
	@echo "Cleaning done."
	@cd build && make testall_main -j8 -f ${MAKEFILE}
	@cp build/testall_main ./
	@mpirun -np 2 ./testall_main 

testall_main : ${OBJ_TEST}
	-${CXX} -o testall_main ${OBJ_TEST} ${LIBS} 

testfortran:
	@rm -rf fortran_main
	@echo "Cleaning..."
	@mkdir -p build 2>/dev/null
	@./pre.sh
	@cd build && make clean 
	@echo "Cleaning done."
	@cd build && make fortran_main -j8 -f ${MAKEFILE}
	@cp build/fortran_main ./
	@mpirun -n 4 ./fortran_main

fortran_main : ${OBJ_FORTRAN}
	-${CXX} -o fortran_main ${OBJ_FORTRAN} ${EXT_LIB_LINK}

small:
	@make all -j8 -f ${MAKEFILE}
	@mpirun -n 4 ./main 4 3 2

clean:
	@rm -rf *.o 2>/dev/null


