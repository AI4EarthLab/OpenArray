name = main
compile_thread = #-j8

#if you put the exteranl libaray in one directory
EXT_INCLUDE = $(addprefix -I, $(shell find ${EXT_PATH}/include -maxdepth 1 -type d))
EXT_LIB = -L${EXT_PATH}/lib64/
JIT_LIB = ${EXT_PATH}/lib64/

#if you put the external library seperately in different directories.
#use the following configureaton
# EXT_INC = -I${PNETCDF_INC} -I${ARMA_INC} -I${BOOST_INC} -I${GTEST_INC} -I${JIT_INC}
# EXT_LIB = -L${PNETCDF_LIB} -L${ARMA_LIB} -L${BOOST_LIB} -I${GTEST_LIB} -L${JIT_LIB}


EXT_LIB_LINK = 	-lpnetcdf -lboost_program_options -lboost_filesystem \
		-lboost_system -ldl -llapack -lblas -lgtest -ljit \
		-Wl,-rpath ${JIT_LIB}

oplevel0 = -O0 -g 
oplevel3 = -O3

FC = mpif90 ${oplevel0}
CC = mpicc  ${oplevel0}
CXX = mpicxx ${oplevel0}

FCFLAGS  = -J${CURDIR}/ -fno-trapping-math -fno-signaling-nans -ffree-line-length-0

CXXFLAGS = -fPIC --std=c++0x -Werror=return-type \
		-fno-trapping-math -fno-signaling-nans

CFLAGS   = -Werror=return-type -fno-trapping-math \
		-fno-signaling-nans

LIBS =  -lstdc++ ${EXT_LIB} ${EXT_LIB_LINK} 

# OBJS = Range.o Box.o Partition.o Array.o \
#        Internal.o Function.o Kernel.o Operator.o \
#        Node.o IO.o Grid.o Init.o

OBJS = $(addsuffix .o,  $(basename $(wildcard *.cpp))) \
	$(addsuffix .o, $(basename $(wildcard utils/*.cpp))) \
	$(addsuffix .o, $(basename $(wildcard c-interface/*.cpp))) \
	$(addsuffix .o, $(basename $(wildcard modules/*/*.cpp)))

# $(addsuffix .o, \
# $(basename \
# $(wildcard \
# $(addsuffix /*.cpp, \
# $(wildcard modules/*)))))


#OBJS_UTILS = $(addprefix ./utils/, calcTime.o gettimeofday.o \
#			utils.o)

#OBJS_UTILS = $(addsuffix .o, $(basename $(wildcard utils/*.cpp)))

# OBJS_C_INTERFACE = $(addprefix ./c-interface/, \
# 			c_oa_partition.o \
# 			c_oa_type.o c_oa_utils.o c_oa_sub.o)



# OBJ_FORTRAN = ${OBJS} ${OBJS_UTILS} ${OBJS_C_INTERFACE} \
# 		$(addprefix ./fortran/, \
# 		oa_partition.o oa_type.o oa_ops.o \
# 		oa_utils.o oa_sub.o oa_sum.o oa_rep.o oa_mod.o \
# 		oa_test.o oa_main.o)

OBJ_FORTRAN = ${OBJS} \
	$(addsuffix .o, $(basename $(wildcard fortran/*.F90)))


OBJ_MAIN  = ${OBJS}  test/main.o

OBJ_TEST = ${OBJS} $(addprefix ./unittest/, test_array.o gtest_main.o)

OBJ_TEST_PERF = ${OBJS} $(addprefix ./unittest/, test_perf.o)

.DEFAULT_GOAL := all

MAKEFILE = makefile.osx

AA = $(wildcard *.cpp) $(wildcard modules/*/*.cpp)

debug:
	@echo ${OBJS}   

%.o: %.cpp
	$(CXX) ${EXT_INCLUDE} -c $(CXXFLAGS) $< -o $@

%.o: %.c
	$(CXX) ${EXT_INCLUDE} -c $(CFLAGS) $< -o $@

%.o: %.F90
	$(FC) ${FCFLAGS} -c $< -o $@

%.d: %.cpp
	@set -e; rm -f $@; $(CXX) ${EXT_INCLUDE} -MM $< $(INCLUDEFLAGS) > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

%.d: %.c
	@set -e; rm -f $@; $(CC) ${EXT_INCLUDE} -MM $< $(INCLUDEFLAGS) > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$


%.d: %.F90 
	@set -e; rm -f $@; $(FC) ${FCFLAGS} -MM $< $(INCLUDEFLAGS) > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

###===##-include $(OBJS:.o=.d) 
##===##-include $(OBJ_FORTRAN:.o=.d) 
##===##-include $(OBJS_UTILS:.o=.d) 
##===##-include $(OBJ_MAIN:.o=.d) 
###===##-include test/main.o=test/main.d

all:
	@rm -rf main
	@echo "Cleaning..."
	@mkdir -p build 
	@./pre.sh
	@cd build && make clean  -f ${MAKEFILE}
	@echo "Cleaning done."
	@cd build && sed -i "" "s/##===##//g" ${MAKEFILE} && make main ${compile_thread} -f ${MAKEFILE} 

	cp build/main ./

quick:
	@rm -rf ${name}
	@echo "Cleaning..."
	@mkdir -p build 2>/dev/null
	@./test.sh
	@cd build
	@echo "Cleaning done."
	@cd build && sed -i "" "s/##===##//g" ${MAKEFILE} && make ${name} ${compile_thread} -f ${MAKEFILE}
	@cp build/${name} ./
	@mpirun -oversubscribe -n 8 ./${name} 4 4 4

main: ${OBJ_MAIN} 
	-${CXX} -rdynamic -o main ${OBJ_MAIN} ${LIBS}

testall:
	@rm -rf main
	@echo "Cleaning..."
	@mkdir -p build 2>/dev/null
	@./pre.sh
	@cd build && make clean  -f ${MAKEFILE}
	@echo "Cleaning done."
	@cd build && sed -i "" "s/##===##//g" ${MAKEFILE} && make testall_main ${compile_thread} -f ${MAKEFILE}
	@cp build/testall_main ./
	@mpirun -np 2 ./testall_main 

testall_main : ${OBJ_TEST}
	-${CXX} -o testall_main ${OBJ_TEST} ${LIBS} 

testfortran:
	@rm -rf fortran_main
	@echo "Cleaning..."
	@mkdir -p build 2>/dev/null
	@./pre.sh
	@cd build && make clean  -f ${MAKEFILE}
	@echo "Cleaning done."
	@cd build &&sed -i "" "s/##===##//g" ${MAKEFILE} && make fortran_main ${compile_thread} -f ${MAKEFILE} 
	@cp build/fortran_main ./
	@mpirun -n 4 ./fortran_main

fortran_main : ${OBJ_FORTRAN}
	-${CXX} -o fortran_main ${OBJ_FORTRAN} \
	${EXT_LIB_LINK} ${LIBS} -lgfortran

small:
	@make all -f ${MAKEFILE}
	@mpirun -n 4 ./main 4 3 2

clean:
	@find . -name "*.o" \
	-or -name "*.d*" \
	-or -name "*.mod" \
	-or -name "main" \
	-or -name "fortran_main" \
	-or -name "testall_main" | \
	xargs rm -f  &>/dev/null
