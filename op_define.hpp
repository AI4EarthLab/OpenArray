#ifndef __OP_DEFINE_HPP__
#define __OP_DEFINE_HPP__

#include "Operator.hpp"

#define NODE(x)           oa::ops::new_node(x)

#define PLUS(x, y)        oa::ops::new_node(TYPE_PLUS, x, y)
#define MINUS(x, y)       oa::ops::new_node(TYPE_MINUS, x, y)
#define MULT(x, y)        oa::ops::new_node(TYPE_MULT, x, y)
#define DIVD(x, y)        oa::ops::new_node(TYPE_DIVD, x, y)
#define GT(x, y)          oa::ops::new_node(TYPE_GT, x, y)
#define GE(x, y)          oa::ops::new_node(TYPE_GE, x, y)
#define LT(x, y)          oa::ops::new_node(TYPE_LT, x, y)
#define LE(x, y)          oa::ops::new_node(TYPE_LE, x, y)
#define EQ(x, y)          oa::ops::new_node(TYPE_EQ, x, y)
#define NE(x, y)          oa::ops::new_node(TYPE_NE, x, y)
#define MIN(x, y)         oa::ops::new_node(TYPE_MIN, x, y)
#define MAX(x, y)         oa::ops::new_node(TYPE_MAX, x, y)
#define MIN_AT(x, y)      oa::ops::new_node(TYPE_MIN_AT, x, y)
#define MAX_AT(x, y)      oa::ops::new_node(TYPE_MAX_AT, x, y)
#define ABS_MIN(x, y)     oa::ops::new_node(TYPE_ABS_MIN, x, y)
#define ABS_MAX(x, y)     oa::ops::new_node(TYPE_ABS_MAX, x, y)
#define ABS_MIX_AT(x, y)  oa::ops::new_node(TYPE_ABS_MIN_AT, x, y)
#define ABS_MAX_AT(x, y)  oa::ops::new_node(TYPE_ABS_MAX_AT, x, y)
#define POW(x)            oa::ops::new_node(TYPE_POW, x)
#define EXP(x)            oa::ops::new_node(TYPE_EXP, x)
#define SIN(x)            oa::ops::new_node(TYPE_SIN, x)
#define TAN(x)            oa::ops::new_node(TYPE_TAN, x)
#define COS(x)            oa::ops::new_node(TYPE_COS, x)
#define RCP(x)            oa::ops::new_node(TYPE_RCP, x)
#define SQRT(x)           oa::ops::new_node(TYPE_SQRT, x)
#define ASIN(x)           oa::ops::new_node(TYPE_ASIN, x)
#define ACOS(x)           oa::ops::new_node(TYPE_ACOS, x)
#define ATAN(x)           oa::ops::new_node(TYPE_ATAN, x)
#define ABS(x)            oa::ops::new_node(TYPE_ABS, x)
#define LOG(x)            oa::ops::new_node(TYPE_LOG, x)
#define UPLUS(x)          oa::ops::new_node(TYPE_UPLUS, x)
#define UMINUS(x)         oa::ops::new_node(TYPE_UMINUS, x)
#define LOG10(x)          oa::ops::new_node(TYPE_LOG10, x)
#define TANH(x)           oa::ops::new_node(TYPE_TANH, x)
#define SINH(x)           oa::ops::new_node(TYPE_SINH, x)
#define COSH(x)           oa::ops::new_node(TYPE_COSH, x)
#define AXB(x)            oa::ops::new_node(TYPE_AXB, x)
#define AXF(x)            oa::ops::new_node(TYPE_AXF, x)
#define AYB(x)            oa::ops::new_node(TYPE_AYB, x)
#define AYF(x)            oa::ops::new_node(TYPE_AYF, x)
#define AZB(x)            oa::ops::new_node(TYPE_AZB, x)
#define AZF(x)            oa::ops::new_node(TYPE_AZF, x)
#define DXB(x)            oa::ops::new_node(TYPE_DXB, x)
#define DXF(x)            oa::ops::new_node(TYPE_DXF, x)
#define DYB(x)            oa::ops::new_node(TYPE_DYB, x)
#define DYF(x)            oa::ops::new_node(TYPE_DYF, x)
#define DZB(x)            oa::ops::new_node(TYPE_DZB, x)
#define DZF(x)            oa::ops::new_node(TYPE_DZF, x)
#define OR(x)             oa::ops::new_node(TYPE_OR, x)
#define AND(x)            oa::ops::new_node(TYPE_AND, x)
#define NOT(x)            oa::ops::new_node(TYPE_NOT, x)

#define EVAL(x)           oa::ops::eval(x)

#endif 